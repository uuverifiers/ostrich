(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: PyEx, converted to v2.6 by CVC4
Application: Symbolic Execution of Python Programs
Target solver: CVC4, Z3, Z3str2
Publications: "Scaling Up DPLL(T) String Solvers Using Context-Dependent Simplification" by A. Reynolds, M. Woo, C. Barrett, D. Brumley, T. Liang, and C. Tinelli, CAV 2017.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun value2 () String)
(declare-fun key2 () String)
(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (not (not (= (ite (str.contains (str.substr value2 0 (- (str.indexof value2 "=" 0) 0)) "M") 1 0) 0)))) (not (not (= (ite (str.contains (str.substr value2 0 (- (str.indexof value2 "=" 0) 0)) "L") 1 0) 0)))) (not (not (= (ite (str.contains (str.substr value2 0 (- (str.indexof value2 "=" 0) 0)) "K") 1 0) 0)))) (not (not (= (ite (str.contains (str.substr value2 0 (- (str.indexof value2 "=" 0) 0)) "J") 1 0) 0)))) (not (not (= (ite (str.contains (str.substr value2 0 (- (str.indexof value2 "=" 0) 0)) "I") 1 0) 0)))) (not (not (= (ite (str.contains (str.substr value2 0 (- (str.indexof value2 "=" 0) 0)) "H") 1 0) 0)))) (not (not (= (ite (str.contains (str.substr value2 0 (- (str.indexof value2 "=" 0) 0)) "G") 1 0) 0)))) (not (not (= (ite (str.contains (str.substr value2 0 (- (str.indexof value2 "=" 0) 0)) "F") 1 0) 0)))) (not (not (= (ite (str.contains (str.substr value2 0 (- (str.indexof value2 "=" 0) 0)) "E") 1 0) 0)))) (not (not (= (ite (str.contains (str.substr value2 0 (- (str.indexof value2 "=" 0) 0)) "D") 1 0) 0)))) (not (not (= (ite (str.contains (str.substr value2 0 (- (str.indexof value2 "=" 0) 0)) "C") 1 0) 0)))) (not (not (= (ite (str.contains (str.substr value2 0 (- (str.indexof value2 "=" 0) 0)) "B") 1 0) 0)))) (not (not (= (ite (str.contains (str.substr value2 0 (- (str.indexof value2 "=" 0) 0)) "A") 1 0) 0)))) (not (= (ite (= (str.len (str.substr value2 0 (- (str.indexof value2 "=" 0) 0))) 0) 1 0) 0))) (not (= (ite (= (str.len (str.substr value2 (+ (str.indexof value2 "=" 0) 1) (- (str.len value2) (+ (str.indexof value2 "=" 0) 1)))) 0) 1 0) 0))) (not (= (ite (str.contains value2 "=") 1 0) 0))) (not (not (= (ite (= (str.len value2) 0) 1 0) 0)))) (not (= (ite (not (= (str.indexof value2 "=" 0) (- 1))) 1 0) 0))) (not (not (= (ite (str.contains value2 ",") 1 0) 0)))) (not (not (= (ite (= (str.len value2) 0) 1 0) 0)))) (not (= (ite (= key2 "cache-control") 1 0) 0))) (not (= (ite (= key2 "cache-control") 1 0) 0))) (>= 0 0)) (>= (- (str.indexof value2 "=" 0) 0) 0)) (>= 0 0)) (>= (- (str.indexof value2 "=" 0) 0) 0)) (>= 0 0)) (>= (- (str.indexof value2 "=" 0) 0) 0)) (>= 0 0)) (>= (- (str.indexof value2 "=" 0) 0) 0)) (>= 0 0)) (>= (- (str.indexof value2 "=" 0) 0) 0)) (>= 0 0)) (>= (- (str.indexof value2 "=" 0) 0) 0)) (>= 0 0)) (>= (- (str.indexof value2 "=" 0) 0) 0)) (>= 0 0)) (>= (- (str.indexof value2 "=" 0) 0) 0)) (>= 0 0)) (>= (- (str.indexof value2 "=" 0) 0) 0)) (>= 0 0)) (>= (- (str.indexof value2 "=" 0) 0) 0)) (>= 0 0)) (>= (- (str.indexof value2 "=" 0) 0) 0)) (>= 0 0)) (>= (- (str.indexof value2 "=" 0) 0) 0)) (>= 0 0)) (>= (- (str.indexof value2 "=" 0) 0) 0)) (>= 0 0)) (>= (- (str.indexof value2 "=" 0) 0) 0)) (>= (+ (str.indexof value2 "=" 0) 1) 0)) (>= (- (str.len value2) (+ (str.indexof value2 "=" 0) 1)) 0)))
(check-sat)

(exit)
