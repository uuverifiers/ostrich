(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: Kudzu, converted to v2.6 by CVC4
Application: Symbolic Execution of Javascript
Target solver: Kaluza
Publications: "A symbolic execution framework for JavaScript" by P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, 2010.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun I0_12 () Int)
(declare-fun I0_26 () Int)
(declare-fun I0_40 () Int)
(declare-fun PCTEMP_LHS_1 () Int)
(declare-fun PCTEMP_LHS_2 () Int)
(declare-fun PCTEMP_LHS_3 () Int)
(declare-fun T0_12 () String)
(declare-fun T0_26 () String)
(declare-fun T0_40 () String)
(declare-fun T1_11 () String)
(declare-fun T1_12 () String)
(declare-fun T1_18 () String)
(declare-fun T1_22 () String)
(declare-fun T1_25 () String)
(declare-fun T1_26 () String)
(declare-fun T1_32 () String)
(declare-fun T1_36 () String)
(declare-fun T1_39 () String)
(declare-fun T1_4 () String)
(declare-fun T1_40 () String)
(declare-fun T1_8 () String)
(declare-fun T2_11 () String)
(declare-fun T2_12 () String)
(declare-fun T2_18 () String)
(declare-fun T2_22 () String)
(declare-fun T2_25 () String)
(declare-fun T2_26 () String)
(declare-fun T2_32 () String)
(declare-fun T2_36 () String)
(declare-fun T2_39 () String)
(declare-fun T2_4 () String)
(declare-fun T2_40 () String)
(declare-fun T2_8 () String)
(declare-fun T3_12 () String)
(declare-fun T3_26 () String)
(declare-fun T3_40 () String)
(declare-fun T4_12 () String)
(declare-fun T4_26 () String)
(declare-fun T4_40 () String)
(declare-fun T5_12 () String)
(declare-fun T5_26 () String)
(declare-fun T5_40 () String)
(declare-fun T_1 () String)
(declare-fun T_10 () Bool)
(declare-fun T_11 () String)
(declare-fun T_13 () Bool)
(declare-fun T_14 () Bool)
(declare-fun T_15 () String)
(declare-fun T_16 () Bool)
(declare-fun T_17 () Bool)
(declare-fun T_18 () String)
(declare-fun T_19 () Bool)
(declare-fun T_1a () Bool)
(declare-fun T_1b () String)
(declare-fun T_1d () Bool)
(declare-fun T_1e () Bool)
(declare-fun T_2 () Bool)
(declare-fun T_3 () Bool)
(declare-fun T_4 () String)
(declare-fun T_5 () Bool)
(declare-fun T_6 () Bool)
(declare-fun T_7 () String)
(declare-fun T_9 () Bool)
(declare-fun T_SELECT_1 () Bool)
(declare-fun T_SELECT_2 () Bool)
(declare-fun T_SELECT_3 () Bool)
(declare-fun T_a () Bool)
(declare-fun T_b () String)
(declare-fun T_c () Bool)
(declare-fun T_d () Bool)
(declare-fun T_e () String)
(declare-fun T_f () Bool)
(declare-fun var_0xINPUT_36697 () String)
(assert (= T_1 (str.++ T1_4 T2_4)))
(assert (= T2_4 var_0xINPUT_36697))
(assert (= T1_4 ""))
(assert (= T_2 (= "" T_1)))
(assert (= T_3 (not T_2)))
(assert T_3)
(assert (= T_4 (str.++ T1_8 T2_8)))
(assert (= T2_8 var_0xINPUT_36697))
(assert (= T1_8 ""))
(assert (= T_5 (= T_4 "")))
(assert (= T_6 (not T_5)))
(assert T_6)
(assert (= T_7 (str.++ T1_11 T2_11)))
(assert (= T2_11 var_0xINPUT_36697))
(assert (= T1_11 ""))
(assert (= T_SELECT_1 (not (= PCTEMP_LHS_1 (- 1)))))
(assert (ite T_SELECT_1 (and (= PCTEMP_LHS_1 (+ I0_12 0)) (= T_7 (str.++ T0_12 T1_12)) (= I0_12 (str.len T4_12)) (= 0 (str.len T0_12)) (= T1_12 (str.++ T2_12 T3_12)) (= T2_12 (str.++ T4_12 T5_12)) (= T5_12 "utm_id=") (not (str.in_re T4_12 (re.++ (str.to_re "u") (str.to_re "t") (str.to_re "m") (str.to_re "_") (str.to_re "i") (str.to_re "d") (str.to_re "="))))) (and (= PCTEMP_LHS_1 (- 1)) (= T_7 (str.++ T0_12 T1_12)) (= 0 (str.len T0_12)) (not (str.in_re T1_12 (re.++ (str.to_re "u") (str.to_re "t") (str.to_re "m") (str.to_re "_") (str.to_re "i") (str.to_re "d") (str.to_re "=")))))))
(assert (= T_9 (< (- 1) PCTEMP_LHS_1)))
(assert (= T_a (not T_9)))
(assert T_a)
(assert (= T_b (str.++ T1_18 T2_18)))
(assert (= T2_18 var_0xINPUT_36697))
(assert (= T1_18 ""))
(assert (= T_c (= "" T_b)))
(assert (= T_d (not T_c)))
(assert T_d)
(assert (= T_e (str.++ T1_22 T2_22)))
(assert (= T2_22 var_0xINPUT_36697))
(assert (= T1_22 ""))
(assert (= T_f (= T_e "")))
(assert (= T_10 (not T_f)))
(assert T_10)
(assert (= T_11 (str.++ T1_25 T2_25)))
(assert (= T2_25 var_0xINPUT_36697))
(assert (= T1_25 ""))
(assert (= T_SELECT_2 (not (= PCTEMP_LHS_2 (- 1)))))
(assert (ite T_SELECT_2 (and (= PCTEMP_LHS_2 (+ I0_26 0)) (= T_11 (str.++ T0_26 T1_26)) (= I0_26 (str.len T4_26)) (= 0 (str.len T0_26)) (= T1_26 (str.++ T2_26 T3_26)) (= T2_26 (str.++ T4_26 T5_26)) (= T5_26 "utm_source=") (not (str.in_re T4_26 (re.++ (str.to_re "u") (str.to_re "t") (str.to_re "m") (str.to_re "_") (str.to_re "s") (str.to_re "o") (str.to_re "u") (str.to_re "r") (str.to_re "c") (str.to_re "e") (str.to_re "="))))) (and (= PCTEMP_LHS_2 (- 1)) (= T_11 (str.++ T0_26 T1_26)) (= 0 (str.len T0_26)) (not (str.in_re T1_26 (re.++ (str.to_re "u") (str.to_re "t") (str.to_re "m") (str.to_re "_") (str.to_re "s") (str.to_re "o") (str.to_re "u") (str.to_re "r") (str.to_re "c") (str.to_re "e") (str.to_re "=")))))))
(assert (= T_13 (< (- 1) PCTEMP_LHS_2)))
(assert (= T_14 (not T_13)))
(assert T_14)
(assert (= T_15 (str.++ T1_32 T2_32)))
(assert (= T2_32 var_0xINPUT_36697))
(assert (= T1_32 ""))
(assert (= T_16 (= "" T_15)))
(assert (= T_17 (not T_16)))
(assert T_17)
(assert (= T_18 (str.++ T1_36 T2_36)))
(assert (= T2_36 var_0xINPUT_36697))
(assert (= T1_36 ""))
(assert (= T_19 (= T_18 "")))
(assert (= T_1a (not T_19)))
(assert T_1a)
(assert (= T_1b (str.++ T1_39 T2_39)))
(assert (= T2_39 var_0xINPUT_36697))
(assert (= T1_39 ""))
(assert (= T_SELECT_3 (not (= PCTEMP_LHS_3 (- 1)))))
(assert (ite T_SELECT_3 (and (= PCTEMP_LHS_3 (+ I0_40 0)) (= T_1b (str.++ T0_40 T1_40)) (= I0_40 (str.len T4_40)) (= 0 (str.len T0_40)) (= T1_40 (str.++ T2_40 T3_40)) (= T2_40 (str.++ T4_40 T5_40)) (= T5_40 "gclid=") (not (str.in_re T4_40 (re.++ (str.to_re "g") (str.to_re "c") (str.to_re "l") (str.to_re "i") (str.to_re "d") (str.to_re "="))))) (and (= PCTEMP_LHS_3 (- 1)) (= T_1b (str.++ T0_40 T1_40)) (= 0 (str.len T0_40)) (not (str.in_re T1_40 (re.++ (str.to_re "g") (str.to_re "c") (str.to_re "l") (str.to_re "i") (str.to_re "d") (str.to_re "=")))))))
(assert (= T_1d (< (- 1) PCTEMP_LHS_3)))
(assert (= T_1e (not T_1d)))
(assert T_1e)
(check-sat)

(exit)
