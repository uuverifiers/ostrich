(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.+ (re.* (re.union (re.union (re.* (re.+ (re.+ (re.union (re.* (re.+ (str.to_re "0"))) (re.* (re.* (str.to_re "1"))))))) (re.union (re.+ (re.* (re.union (re.* (re.+ (str.to_re "222"))) (re.+ (re.+ (str.to_re "3")))))) (re.union (re.* (re.+ (re.+ (re.+ (str.to_re "44"))))) (re.+ (re.* (re.union (re.+ (str.to_re "55")) (re.+ (str.to_re "666")))))))) (re.* (re.+ (re.* (re.+ (re.union (re.union (re.* (str.to_re "777")) (re.union (str.to_re "888") (str.to_re "999"))) (re.+ (re.+ (str.to_re "a")))))))))))) (re.union (re.union (re.+ (re.+ (re.union (re.union (re.union (re.* (re.+ (re.+ (re.+ (str.to_re "bb"))))) (re.+ (re.* (re.union (re.+ (str.to_re "ccc")) (re.* (str.to_re "dd")))))) (re.+ (re.+ (re.+ (re.+ (re.union (str.to_re "ee") (str.to_re "fff"))))))) (re.+ (re.+ (re.* (re.+ (re.+ (re.+ (str.to_re "gg")))))))))) (re.* (re.+ (re.+ (re.* (re.union (re.union (re.union (re.union (re.+ (str.to_re "h")) (re.* (str.to_re "i"))) (re.* (re.+ (str.to_re "jjj")))) (re.+ (re.union (re.+ (str.to_re "kk")) (re.union (str.to_re "ll") (str.to_re "mm"))))) (re.* (re.union (re.* (re.* (str.to_re "nn"))) (re.+ (re.* (str.to_re "o"))))))))))) (re.+ (re.union (re.* (re.+ (re.+ (re.* (re.* (re.union (re.* (re.* (str.to_re "p"))) (re.+ (re.union (str.to_re "qqq") (str.to_re "rrr"))))))))) (re.union (re.* (re.union (re.* (re.union (re.union (re.* (re.* (str.to_re "s"))) (re.+ (re.+ (str.to_re "t")))) (re.* (re.union (re.union (str.to_re "u") (str.to_re "vvv")) (re.* (str.to_re "ww")))))) (re.* (re.union (re.+ (re.* (re.+ (str.to_re "x")))) (re.+ (re.* (re.+ (str.to_re "y")))))))) (re.union (re.+ (re.* (re.* (re.* (re.union (re.+ (str.to_re "z")) (re.union (str.to_re "AA") (str.to_re "B"))))))) (re.union (re.+ (re.+ (re.* (re.+ (re.+ (str.to_re "C")))))) (re.union (re.* (re.* (re.* (re.union (str.to_re "DDD") (str.to_re "EE"))))) (re.* (re.+ (re.* (re.* (str.to_re "FF")))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
