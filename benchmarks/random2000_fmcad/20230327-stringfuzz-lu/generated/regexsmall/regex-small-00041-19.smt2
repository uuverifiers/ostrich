(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.* (str.to_re "000"))) (re.++ (re.+ (re.union (str.to_re "111") (str.to_re "2"))) (re.++ (re.union (re.+ (str.to_re "3")) (re.* (str.to_re "444"))) (re.++ (re.* (re.union (str.to_re "5") (str.to_re "6"))) (re.++ (re.* (re.* (str.to_re "7"))) (re.++ (re.union (re.union (str.to_re "88") (str.to_re "9")) (re.* (str.to_re "aaa"))) (re.++ (re.+ (re.+ (str.to_re "b"))) (re.++ (re.union (re.* (str.to_re "ccc")) (re.* (str.to_re "d"))) (re.++ (re.* (re.+ (str.to_re "ee"))) (re.++ (re.union (re.+ (str.to_re "f")) (re.* (str.to_re "g"))) (re.++ (re.union (re.union (str.to_re "hhh") (str.to_re "ii")) (re.+ (str.to_re "jjj"))) (re.++ (re.* (re.+ (str.to_re "kk"))) (re.++ (re.union (re.+ (str.to_re "ll")) (re.* (str.to_re "mmm"))) (re.++ (re.+ (re.+ (str.to_re "nn"))) (re.++ (re.* (re.+ (str.to_re "ooo"))) (re.++ (re.+ (re.+ (str.to_re "ppp"))) (re.++ (re.union (re.union (str.to_re "q") (str.to_re "rr")) (re.+ (str.to_re "ss"))) (re.++ (re.* (re.+ (str.to_re "t"))) (re.++ (re.* (re.* (str.to_re "u"))) (re.++ (re.* (re.+ (str.to_re "v"))) (re.++ (re.* (re.+ (str.to_re "w"))) (re.++ (re.* (re.* (str.to_re "xx"))) (re.++ (re.* (re.union (str.to_re "yy") (str.to_re "z"))) (re.++ (re.+ (re.+ (str.to_re "AAA"))) (re.++ (re.+ (re.+ (str.to_re "BB"))) (re.++ (re.* (re.+ (str.to_re "C"))) (re.++ (re.* (re.union (str.to_re "DDD") (str.to_re "EEE"))) (re.++ (re.* (re.+ (str.to_re "F"))) (re.++ (re.* (re.union (str.to_re "GGG") (str.to_re "HHH"))) (re.++ (re.+ (re.union (str.to_re "I") (str.to_re "J"))) (re.++ (re.union (re.+ (str.to_re "KK")) (re.union (str.to_re "LL") (str.to_re "MM"))) (re.++ (re.union (re.+ (str.to_re "N")) (re.* (str.to_re "O"))) (re.++ (re.* (re.union (str.to_re "P") (str.to_re "QQQ"))) (re.++ (re.union (re.* (str.to_re "R")) (re.* (str.to_re "SSS"))) (re.++ (re.+ (re.union (str.to_re "TTT") (str.to_re "UUU"))) (re.++ (re.* (re.* (str.to_re "VVV"))) (re.++ (re.* (re.+ (str.to_re "W"))) (re.++ (re.* (re.union (str.to_re "XX") (str.to_re "YYY"))) (re.++ (re.+ (re.union (str.to_re "ZZ") (str.to_re "!!"))) (re.++ (re.union (re.+ (str.to_re """""""")) (re.union (str.to_re "#") (str.to_re "$$$"))) (re.union (re.union (str.to_re "%%") (str.to_re "&&&")) (re.union (str.to_re "''") (str.to_re "((")))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
