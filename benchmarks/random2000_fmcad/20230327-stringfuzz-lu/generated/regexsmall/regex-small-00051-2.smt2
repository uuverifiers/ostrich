(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.+ (str.to_re "00"))) (re.++ (re.+ (re.* (str.to_re "1"))) (re.++ (re.+ (re.* (str.to_re "222"))) (re.++ (re.+ (re.* (str.to_re "3"))) (re.++ (re.+ (re.union (str.to_re "4") (str.to_re "5"))) (re.++ (re.* (re.+ (str.to_re "6"))) (re.++ (re.* (re.* (str.to_re "7"))) (re.++ (re.+ (re.* (str.to_re "88"))) (re.++ (re.* (re.* (str.to_re "99"))) (re.++ (re.union (re.union (str.to_re "aaa") (str.to_re "bb")) (re.+ (str.to_re "ccc"))) (re.++ (re.+ (re.+ (str.to_re "d"))) (re.++ (re.* (re.+ (str.to_re "e"))) (re.++ (re.* (re.+ (str.to_re "ff"))) (re.++ (re.* (re.* (str.to_re "g"))) (re.++ (re.union (re.+ (str.to_re "h")) (re.union (str.to_re "iii") (str.to_re "jjj"))) (re.++ (re.* (re.+ (str.to_re "kk"))) (re.++ (re.+ (re.+ (str.to_re "l"))) (re.++ (re.* (re.union (str.to_re "mm") (str.to_re "nn"))) (re.++ (re.* (re.+ (str.to_re "oo"))) (re.++ (re.* (re.+ (str.to_re "pp"))) (re.++ (re.union (re.+ (str.to_re "qq")) (re.union (str.to_re "r") (str.to_re "ss"))) (re.++ (re.* (re.union (str.to_re "ttt") (str.to_re "uu"))) (re.++ (re.* (re.+ (str.to_re "v"))) (re.++ (re.+ (re.* (str.to_re "w"))) (re.++ (re.union (re.+ (str.to_re "xx")) (re.* (str.to_re "y"))) (re.++ (re.union (re.* (str.to_re "zzz")) (re.union (str.to_re "A") (str.to_re "BBB"))) (re.++ (re.* (re.union (str.to_re "CC") (str.to_re "D"))) (re.++ (re.* (re.* (str.to_re "EEE"))) (re.++ (re.+ (re.+ (str.to_re "F"))) (re.++ (re.* (re.+ (str.to_re "GG"))) (re.++ (re.union (re.union (str.to_re "HHH") (str.to_re "II")) (re.+ (str.to_re "J"))) (re.++ (re.union (re.union (str.to_re "KK") (str.to_re "L")) (re.+ (str.to_re "M"))) (re.++ (re.union (re.union (str.to_re "NNN") (str.to_re "O")) (re.union (str.to_re "PP") (str.to_re "QQ"))) (re.++ (re.union (re.union (str.to_re "R") (str.to_re "S")) (re.union (str.to_re "T") (str.to_re "UU"))) (re.++ (re.union (re.* (str.to_re "VV")) (re.union (str.to_re "W") (str.to_re "XXX"))) (re.++ (re.+ (re.* (str.to_re "Y"))) (re.++ (re.* (re.+ (str.to_re "ZZ"))) (re.++ (re.+ (re.+ (str.to_re "!!!"))) (re.++ (re.union (re.union (str.to_re """") (str.to_re "#")) (re.+ (str.to_re "$$"))) (re.++ (re.union (re.union (str.to_re "%%") (str.to_re "&&&")) (re.* (str.to_re "'''"))) (re.++ (re.union (re.union (str.to_re "(") (str.to_re "))")) (re.+ (str.to_re "**"))) (re.++ (re.union (re.* (str.to_re "+")) (re.* (str.to_re ","))) (re.++ (re.union (re.* (str.to_re "--")) (re.* (str.to_re ".."))) (re.++ (re.union (re.* (str.to_re "//")) (re.* (str.to_re ":"))) (re.++ (re.union (re.* (str.to_re ";;;")) (re.* (str.to_re "<<"))) (re.++ (re.* (re.union (str.to_re "===") (str.to_re ">>>"))) (re.++ (re.* (re.+ (str.to_re "?"))) (re.++ (re.union (re.* (str.to_re "@@@")) (re.union (str.to_re "[") (str.to_re "\\"))) (re.++ (re.* (re.* (str.to_re "]]]"))) (re.++ (re.union (re.union (str.to_re "^^") (str.to_re "___")) (re.* (str.to_re "``"))) (re.union (re.union (str.to_re "{{") (str.to_re "||")) (re.union (str.to_re "}}}") (str.to_re "~")))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
