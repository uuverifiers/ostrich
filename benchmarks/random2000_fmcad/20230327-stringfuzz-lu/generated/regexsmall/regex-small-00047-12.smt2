(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.union (str.to_re "0") (str.to_re "11"))) (re.++ (re.* (re.union (str.to_re "2") (str.to_re "33"))) (re.++ (re.+ (re.union (str.to_re "44") (str.to_re "5"))) (re.++ (re.union (re.+ (str.to_re "6")) (re.union (str.to_re "7") (str.to_re "8"))) (re.++ (re.+ (re.+ (str.to_re "999"))) (re.++ (re.union (re.union (str.to_re "a") (str.to_re "bb")) (re.* (str.to_re "c"))) (re.++ (re.union (re.+ (str.to_re "ddd")) (re.union (str.to_re "ee") (str.to_re "fff"))) (re.++ (re.* (re.union (str.to_re "ggg") (str.to_re "h"))) (re.++ (re.+ (re.union (str.to_re "ii") (str.to_re "j"))) (re.++ (re.+ (re.* (str.to_re "k"))) (re.++ (re.union (re.* (str.to_re "l")) (re.* (str.to_re "mmm"))) (re.++ (re.+ (re.* (str.to_re "nnn"))) (re.++ (re.+ (re.union (str.to_re "oo") (str.to_re "pp"))) (re.++ (re.union (re.+ (str.to_re "qq")) (re.+ (str.to_re "rr"))) (re.++ (re.* (re.* (str.to_re "s"))) (re.++ (re.* (re.* (str.to_re "t"))) (re.++ (re.* (re.* (str.to_re "u"))) (re.++ (re.union (re.* (str.to_re "vvv")) (re.union (str.to_re "ww") (str.to_re "xx"))) (re.++ (re.+ (re.+ (str.to_re "yyy"))) (re.++ (re.union (re.+ (str.to_re "zz")) (re.+ (str.to_re "AA"))) (re.++ (re.* (re.* (str.to_re "BB"))) (re.++ (re.+ (re.+ (str.to_re "C"))) (re.++ (re.* (re.union (str.to_re "DD") (str.to_re "E"))) (re.++ (re.+ (re.* (str.to_re "F"))) (re.++ (re.+ (re.* (str.to_re "G"))) (re.++ (re.* (re.* (str.to_re "HHH"))) (re.++ (re.+ (re.union (str.to_re "I") (str.to_re "JJJ"))) (re.++ (re.+ (re.union (str.to_re "KK") (str.to_re "LLL"))) (re.++ (re.+ (re.* (str.to_re "MM"))) (re.++ (re.+ (re.union (str.to_re "N") (str.to_re "OOO"))) (re.++ (re.* (re.* (str.to_re "PP"))) (re.++ (re.union (re.* (str.to_re "QQ")) (re.* (str.to_re "RR"))) (re.++ (re.union (re.+ (str.to_re "SSS")) (re.* (str.to_re "T"))) (re.++ (re.+ (re.union (str.to_re "U") (str.to_re "VV"))) (re.++ (re.+ (re.+ (str.to_re "WW"))) (re.++ (re.+ (re.union (str.to_re "XX") (str.to_re "Y"))) (re.++ (re.+ (re.+ (str.to_re "ZZ"))) (re.++ (re.* (re.+ (str.to_re "!"))) (re.++ (re.* (re.* (str.to_re """"""""))) (re.++ (re.* (re.* (str.to_re "#"))) (re.++ (re.* (re.+ (str.to_re "$$$"))) (re.++ (re.* (re.* (str.to_re "%%%"))) (re.++ (re.+ (re.union (str.to_re "&&&") (str.to_re "'"))) (re.++ (re.* (re.union (str.to_re "((") (str.to_re "))"))) (re.++ (re.* (re.+ (str.to_re "*"))) (re.++ (re.* (re.+ (str.to_re "++"))) (re.* (re.union (str.to_re ",") (str.to_re "---")))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
