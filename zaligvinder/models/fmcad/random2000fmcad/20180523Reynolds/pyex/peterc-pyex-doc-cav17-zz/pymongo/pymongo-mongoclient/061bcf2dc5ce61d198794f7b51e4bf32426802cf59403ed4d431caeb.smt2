(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: PyEx, converted to v2.6 by CVC4
Application: Symbolic Execution of Python Programs
Target solver: CVC4, Z3, Z3str2
Publications: "Scaling Up DPLL(T) String Solvers Using Context-Dependent Simplification" by A. Reynolds, M. Woo, C. Barrett, D. Brumley, T. Liang, and C. Tinelli, CAV 2017.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun uri () String)
(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (not (not (= (ite (str.contains (str.substr uri 0 (- (str.indexof uri "," 0) 0)) "V") 1 0) 0)))) (not (not (= (ite (str.contains (str.substr uri 0 (- (str.indexof uri "," 0) 0)) "U") 1 0) 0)))) (not (not (= (ite (str.contains (str.substr uri 0 (- (str.indexof uri "," 0) 0)) "T") 1 0) 0)))) (not (not (= (ite (str.contains (str.substr uri 0 (- (str.indexof uri "," 0) 0)) "S") 1 0) 0)))) (not (not (= (ite (str.contains (str.substr uri 0 (- (str.indexof uri "," 0) 0)) "R") 1 0) 0)))) (not (not (= (ite (str.contains (str.substr uri 0 (- (str.indexof uri "," 0) 0)) "Q") 1 0) 0)))) (not (not (= (ite (str.contains (str.substr uri 0 (- (str.indexof uri "," 0) 0)) "P") 1 0) 0)))) (not (not (= (ite (str.contains (str.substr uri 0 (- (str.indexof uri "," 0) 0)) "O") 1 0) 0)))) (not (not (= (ite (str.contains (str.substr uri 0 (- (str.indexof uri "," 0) 0)) "N") 1 0) 0)))) (not (not (= (ite (str.contains (str.substr uri 0 (- (str.indexof uri "," 0) 0)) "M") 1 0) 0)))) (not (not (= (ite (str.contains (str.substr uri 0 (- (str.indexof uri "," 0) 0)) "L") 1 0) 0)))) (not (not (= (ite (str.contains (str.substr uri 0 (- (str.indexof uri "," 0) 0)) "K") 1 0) 0)))) (not (not (= (ite (str.contains (str.substr uri 0 (- (str.indexof uri "," 0) 0)) "J") 1 0) 0)))) (not (not (= (ite (str.contains (str.substr uri 0 (- (str.indexof uri "," 0) 0)) "I") 1 0) 0)))) (not (not (= (ite (str.contains (str.substr uri 0 (- (str.indexof uri "," 0) 0)) "H") 1 0) 0)))) (not (not (= (ite (str.contains (str.substr uri 0 (- (str.indexof uri "," 0) 0)) "G") 1 0) 0)))) (not (not (= (ite (str.contains (str.substr uri 0 (- (str.indexof uri "," 0) 0)) "F") 1 0) 0)))) (not (not (= (ite (str.contains (str.substr uri 0 (- (str.indexof uri "," 0) 0)) "E") 1 0) 0)))) (not (not (= (ite (str.contains (str.substr uri 0 (- (str.indexof uri "," 0) 0)) "D") 1 0) 0)))) (not (not (= (ite (str.contains (str.substr uri 0 (- (str.indexof uri "," 0) 0)) "C") 1 0) 0)))) (not (not (= (ite (str.contains (str.substr uri 0 (- (str.indexof uri "," 0) 0)) "B") 1 0) 0)))) (not (not (= (ite (str.contains (str.substr uri 0 (- (str.indexof uri "," 0) 0)) "A") 1 0) 0)))) (not (not (= (ite (not (= (str.indexof (str.substr uri 0 (- (str.indexof uri "," 0) 0)) ":" 0) (- 1))) 1 0) 0)))) (not (not (= (ite (= (str.at (str.substr uri 0 (- (str.indexof uri "," 0) 0)) 0) "[") 1 0) 0)))) (not (= (ite (not (= (str.len (str.substr uri 0 (- (str.indexof uri "," 0) 0))) 0)) 1 0) 0))) (not (= (ite (= (str.len (str.substr uri (+ (str.indexof uri "," 0) 1) (- (str.len uri) (+ (str.indexof uri "," 0) 1)))) 0) 1 0) 0))) (not (= (ite (str.contains uri ",") 1 0) 0))) (not (not (= (ite (= (str.len uri) 0) 1 0) 0)))) (not (not (= (ite (str.contains uri "://") 1 0) 0)))) (>= 0 0)) (>= (- (str.indexof uri "," 0) 0) 0)) (>= 0 0)) (>= (- (str.indexof uri "," 0) 0) 0)) (>= 0 0)) (>= (- (str.indexof uri "," 0) 0) 0)) (>= 0 0)) (>= (- (str.indexof uri "," 0) 0) 0)) (>= 0 0)) (>= (- (str.indexof uri "," 0) 0) 0)) (>= 0 0)) (>= (- (str.indexof uri "," 0) 0) 0)) (>= 0 0)) (>= (- (str.indexof uri "," 0) 0) 0)) (>= 0 0)) (>= (- (str.indexof uri "," 0) 0) 0)) (>= 0 0)) (>= (- (str.indexof uri "," 0) 0) 0)) (>= 0 0)) (>= (- (str.indexof uri "," 0) 0) 0)) (>= 0 0)) (>= (- (str.indexof uri "," 0) 0) 0)) (>= 0 0)) (>= (- (str.indexof uri "," 0) 0) 0)) (>= 0 0)) (>= (- (str.indexof uri "," 0) 0) 0)) (>= 0 0)) (>= (- (str.indexof uri "," 0) 0) 0)) (>= 0 0)) (>= (- (str.indexof uri "," 0) 0) 0)) (>= 0 0)) (>= (- (str.indexof uri "," 0) 0) 0)) (>= 0 0)) (>= (- (str.indexof uri "," 0) 0) 0)) (>= 0 0)) (>= (- (str.indexof uri "," 0) 0) 0)) (>= 0 0)) (>= (- (str.indexof uri "," 0) 0) 0)) (>= 0 0)) (>= (- (str.indexof uri "," 0) 0) 0)) (>= 0 0)) (>= (- (str.indexof uri "," 0) 0) 0)) (>= 0 0)) (>= (- (str.indexof uri "," 0) 0) 0)) (>= 0 0)) (>= (- (str.indexof uri "," 0) 0) 0)) (>= 0 0)) (>= (- (str.indexof uri "," 0) 0) 0)) (>= 0 0)) (>= (- (str.indexof uri "," 0) 0) 0)) (>= (+ (str.indexof uri "," 0) 1) 0)) (>= (- (str.len uri) (+ (str.indexof uri "," 0) 1)) 0)))
(check-sat)

(exit)
